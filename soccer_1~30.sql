SELECT * FROM TAB;

DESC TEAM;

DESC STADIM;

DESC SCHEDULE;

DESC PLAYER;

SELECT *
FROM PLAYER
WHERE BACK_NO LIKE '20';

-- SQL_TEST_001
-- 전체 축구팀 목록. 이름 오름차순

SELECT 
    TEAM_NAME "전체 축구팀 목록"
FROM TEAM
ORDER BY TEAM_NAME;

-- SQL_TEST_003
-- 포지션 종류(중복제거,없으면 신입으로 기재)
-- nvl2()사용


SELECT DISTINCT NVL2(POSITION,POSITION,'신입') 포지션
FROM PLAYER;

-- SQL_TEST_004
-- 수원팀(ID: K02)골키퍼

SELECT 
    PLAYER_NAME 이름
FROM PLAYER
WHERE TEAM_ID LIKE 'K02' AND POSITION LIKE 'GK';
    
    
-- SQL_TEST_005
-- 수원팀(ID: K02)키가 170 이상 선수
-- 이면서 성이 고씨인 선수

SELECT POSITION 포지션,PLAYER_NAME 이름
FROM PLAYER
WHERE TEAM_ID LIKE 'K02' AND HEIGHT >= 170 AND PLAYER_NAME LIKE '고%';
    

-- SQL_TEST_006
-- 수원팀(ID: K02) 선수들 이름,
-- 키와 몸무게 리스트 (단위 cm 와 kg 삽입)
-- 키와 몸무게가 없으면 "0" 표시
-- 키 내림차순

SELECT CONCAT(PLAYER_NAME,'선수')이름,
              TO_CHAR (NVL2(HEIGHT,HEIGHT,0) || 'CM')키,
              TO_CHAR (NVL2(WEIGHT,WEIGHT,0) || 'KG')몸무게
FROM PLAYER
WHERE TEAM_ID LIKE 'K02'
ORDER BY HEIGHT DESC;
    


-- SQL_TEST_007
-- 수원팀(ID: K02) 선수들 이름,
-- 키와 몸무게 리스트 (단위 cm 와 kg 삽입)
-- 키와 몸무게가 없으면 "0" 표시
-- BMI지수 
-- 키 내림차순

SELECT CONCAT(PLAYER_NAME,'선수')이름,
              TO_CHAR (NVL2(HEIGHT,HEIGHT,0) || 'CM')키,
              TO_CHAR (NVL2(WEIGHT,WEIGHT,0) || 'KG')몸무게,
              ROUND(WEIGHT /(HEIGHT*HEIGHT)*10000,2) BMI비만지수
FROM PLAYER
WHERE TEAM_ID LIKE 'K02'
ORDER BY WEIGHT DESC;
    

SELECT CONCAT(PLAYER_NAME,'선수')이름,
              TO_CHAR (NVL2(HEIGHT,HEIGHT,0) || 'CM')키,
              TO_CHAR (NVL2(WEIGHT,WEIGHT,0) || 'KG')몸무게,
              ROUND(WEIGHT /(HEIGHT*HEIGHT)*10000,2) BMI비만지수
FROM (SELECT PLAYER_NAME,HEIGHT,WEIGHT
      FROM PLAYER
      WHERE TEAM_ID LIKE 'K02')
ORDER BY WEIGHT DESC;

SELECT PLAYER_NAME,HEIGHT,WEIGHT
      FROM PLAYER
      WHERE TEAM_ID LIKE 'K02';

-- SQL_TEST_008
-- 수원팀(ID: K02) 과 대전팀(ID: K10)선수들 중 
--  포지션이 GK 인  선수
-- 팀명, 사람명 오름차순

SELECT T.TEAM_NAME,
       P.POSITION,
       P.PLAYER_NAME
FROM PLAYER P
    JOIN TEAM T
        ON P.TEAM_ID LIKE T.TEAM_ID
WHERE P.TEAM_ID IN ('K02','K10') AND POSITION LIKE 'GK'
ORDER BY T.TEAM_NAME, P.PLAYER_NAME DESC;

-- SQL_TEST_009
-- 수원팀(ID: K02) 과 대전팀(ID: K10)선수들 중 이
-- 키가 180 이상 183 이하인 선수들
-- 키, 팀명, 사람명 오름차순

SELECT TO_CHAR(HEIGHT || 'CM') 키,
       T.TEAM_NAME 팀명,
       P.PLAYER_NAME 이름
FROM PLAYER P
    JOIN TEAM T
        ON P.TEAM_ID LIKE T.TEAM_ID
WHERE P.TEAM_ID IN ('K02','K10') AND HEIGHT BETWEEN 180 AND 183
ORDER BY P.HEIGHT,T.TEAM_NAME,P.PLAYER_NAME;




-- SOCCER_SQL_010
-- 모든 선수들 중
-- 포지션을 배정받지 못한 선수들의 팀과 이름
-- 팀명, 사람명 오름차순
 
SELECT T.TEAM_NAME, P.PLAYER_NAME
FROM (SELECT PLAYER_NAME,TEAM_ID FROM PLAYER WHERE POSITION IS NULL) P
    JOIN TEAM T
        ON P.TEAM_ID LIKE T.TEAM_ID
ORDER BY T.TEAM_NAME,P.PLAYER_NAME;


-- SOCCER_SQL_011
-- 팀과 스타디움을 조인하여
-- 팀이름, 스타디움 이름 출력
 
SELECT TEAM_NAME 팀명,STADIUM_NAME 스타디움
FROM TEAM T
    JOIN STADIUM S
        ON T.STADIUM_ID LIKE S.STADIUM_ID
ORDER BY TEAM_NAME;


-- SOCCER_SQL_012
-- 팀과 스타디움, 스케줄을 조인하여
-- 2012년 3월 17일에 열린 각 경기의 
-- 팀이름, 스타디움, 어웨이팀 이름 출력
-- 다중테이블 join 을 찾아서 해결하시오



SELECT T.TEAM_NAME 팀이름,
       S.STADIUM_NAME 스타디움, 
       (SELECT T.TEAM_NAME
        FROM TEAM T
        WHERE T.TEAM_ID LIKE K.AWAYTEAM_ID)어웨이팀,
       K.SCHE_DATE 스케줄날짜
FROM STADIUM S
    JOIN (SELECT HOMETEAM_ID,C.STADIUM_ID,AWAYTEAM_ID,SCHE_DATE 
          FROM SCHEDULE C 
          WHERE C.SCHE_DATE LIKE '20120317') K
        ON S.STADIUM_ID LIKE K.STADIUM_ID
    JOIN TEAM T
        ON S.STADIUM_ID LIKE T.STADIUM_ID
ORDER BY TEAM_NAME;

-- SOCCER_SQL_013
-- 2012년 3월 17일 경기에 
-- 포항 스틸러스 소속 골키퍼(GK)
-- 선수, 포지션,팀명 (연고지포함), 
-- 스타디움, 경기날짜를 구하시오
-- 연고지와 팀이름은 간격을 띄우시오

SELECT PLAYER_NAME 선수명,
       POSITION 포지션,
       REGION_NAME || ' ' ||TEAM_NAME 팀명,
       STADIUM_NAME 스타디움,
       SCHE_DATE 스케줄날짜
FROM TEAM T
    JOIN PLAYER P
        ON T.TEAM_ID LIKE P.TEAM_ID
    JOIN STADIUM S
        ON T.STADIUM_ID LIKE S.STADIUM_ID
    JOIN SCHEDULE C
        ON S.STADIUM_ID LIKE C.STADIUM_ID
WHERE C.SCHE_DATE LIKE 20120317 AND P.POSITION LIKE 'GK' AND TEAM_NAME LIKE '스틸러스'
ORDER BY PLAYER_NAME;


SELECT PLAYER_NAME 선수명,
       POSITION 포지션,
       REGION_NAME || ' ' ||TEAM_NAME 팀명,
       STADIUM_NAME 스타디움,
       SCHE_DATE 스케줄날짜
FROM (SELECT TEAM_ID,STADIUM_ID,REGION_NAME,TEAM_NAME FROM TEAM T WHERE T.TEAM_NAME LIKE '스틸러스') T
    JOIN PLAYER P
        ON T.TEAM_ID LIKE P.TEAM_ID
    JOIN STADIUM S
        ON T.STADIUM_ID LIKE S.STADIUM_ID
    JOIN SCHEDULE C
        ON S.STADIUM_ID LIKE C.STADIUM_ID
WHERE C.SCHE_DATE LIKE 20120317 AND P.POSITION LIKE 'GK'
ORDER BY PLAYER_NAME;




-- SOCCER_SQL_014
-- 홈팀이 3점이상 차이로 승리한 경기의 
-- 경기장 이름, 경기 일정
-- 홈팀 이름과 원정팀 이름을
-- 구하시오

SELECT * FROM SCHEDULE;

SELECT S.STADIUM_NAME 스타디움,
       C.SCHE_DATE 경기날짜,
       (SELECT REGION_NAME || ' ' || TEAM_NAME 
        FROM TEAM 
        WHERE TEAM_ID LIKE C.HOMETEAM_ID) 홈팀,
       (SELECT REGION_NAME || ' ' || TEAM_NAME 
        FROM TEAM 
        WHERE TEAM_ID LIKE C.AWAYTEAM_ID) 원정팀,
       C.HOME_SCORE "홈팀 점수",
       C.AWAY_SCORE "원정팀 점수"
FROM STADIUM S
    JOIN (SELECT SCHE_DATE,STADIUM_ID,HOMETEAM_ID,AWAYTEAM_ID,HOME_SCORE,AWAY_SCORE 
          FROM SCHEDULE 
          WHERE (HOME_SCORE - AWAY_SCORE) >= 3) C
        ON S.STADIUM_ID LIKE C.STADIUM_ID
ORDER BY HOME_SCORE DESC;

SELECT SCHE_DATE,STADIUM_ID,HOMETEAM_ID,AWAYTEAM_ID,HOME_SCORE,AWAY_SCORE FROM SCHEDULE WHERE (HOME_SCORE - AWAY_SCORE) >= 3 ;

-- SOCCER_SQL_015
-- STADIUM 에 등록된 운동장 중에서
-- 홈팀이 없는 경기장까지 전부 나오도록
-- 카운트 값은 20

SELECT STADIUM_NAME,
       S.STADIUM_ID,
       SEAT_COUNT,
       HOMETEAM_ID,
       T.E_TEAM_NAME
FROM STADIUM S
    LEFT JOIN (SELECT T.E_TEAM_NAME,T.STADIUM_ID FROM TEAM T) T
        ON S.STADIUM_ID LIKE T.STADIUM_ID;


SELECT STADIUM_NAME,
       S.STADIUM_ID,
       SEAT_COUNT,
       HOMETEAM_ID,
       (SELECT T.E_TEAM_NAME 
        FROM TEAM T 
        WHERE T.STADIUM_ID LIKE S.STADIUM_ID)E_TEAM_NAME
FROM STADIUM S;


SELECT T.E_TEAM_NAME 
        FROM TEAM T 
        WHERE T.STADIUM_ID LIKE S.STADIUM_ID;

-- SOCCER_SQL_016
-- 평균키가 인천 유나이티스팀의 평균키 보다 작은 팀의 
-- 팀ID, 팀명, 평균키 추출

SELECT P.TEAM_ID 팀ID, 
    T.TEAM_NAME 팀명, 
    ROUND(AVG(P.HEIGHT),2) 평균키
FROM TEAM T
    JOIN PLAYER P
        ON T.TEAM_ID LIKE P.TEAM_ID
GROUP BY P.TEAM_ID, T.TEAM_NAME
HAVING AVG(P.HEIGHT) < (SELECT AVG(P.HEIGHT)
                        FROM TEAM T
                            JOIN PLAYER P
                                ON T.TEAM_ID LIKE P.TEAM_ID
                        WHERE T.TEAM_NAME LIKE '유나이티드')
ORDER BY 평균키;

-- SOCCER_SQL_017
-- 포지션이 MF 인 선수들의  소속팀명 및 선수명, 백넘버 출력

SELECT (SELECT TEAM_NAME FROM TEAM WHERE TEAM_ID LIKE P.TEAM_ID) 팀명,
       PLAYER_NAME 선수명,
       BACK_NO 백넘버
FROM (SELECT PLAYER_NAME,BACK_NO,TEAM_ID,POSITION FROM PLAYER) P
WHERE POSITION LIKE 'MF'
ORDER BY PLAYER_NAME;


-- SOCCER_SQL_018
-- 가장 키큰 선수 5 추출, 오라클, 단 키 값이 없으면 제외

SELECT P.PLAYER_NAME 선수명,
       P.BACK_NO 백넘버,
       P.POSITION 포지션,
       P.HEIGHT 키
FROM (SELECT PLAYER_NAME,
             BACK_NO,
             POSITION,
             HEIGHT 
      FROM PLAYER 
      WHERE HEIGHT IS NOT NULL
      ORDER BY HEIGHT DESC)P
WHERE ROWNUM BETWEEN 1 AND 5;


-- SOCCER_SQL_019
-- 선수 자신이 속한 팀의 평균키보다 작은 선수 정보 출력


SELECT  TEAM_NAME,
        PLAYER_NAME, 
        POSITION, 
        BACK_NO,
        HEIGHT
FROM PLAYER P
    JOIN TEAM T
        ON P.TEAM_ID LIKE T.TEAM_ID
WHERE P.HEIGHT < (SELECT ROUND(AVG(HEIGHT),2) FROM PLAYER P2 WHERE P2.TEAM_ID LIKE P.TEAM_ID)
ORDER BY P.PLAYER_NAME;


-- SOCCER_SQL_020
-- 2012년 5월 한달간 경기가 있는 경기장 조회
-- EXISTS 쿼리는 항상 연관쿼리로 상요한다.
-- 또한 아무리 조건을 만족하는 건이 여러 건이라도
-- 조건을 만족하는 1건만 찾으면 추가적인 검색을 진행하지 않는다.

SELECT STADIUM_ID ID,
       STADIUM_NAME 경기장명
FROM STADIUM S
WHERE EXISTS (SELECT 1
              FROM SCHEDULE C 
              WHERE C.STADIUM_ID = S.STADIUM_ID AND SCHE_DATE BETWEEN '20120501' AND '20120531');


-- SOCCER_SQL_021
-- 이현 선수 소속팀의 선수명단 출력

SELECT PLAYER_NAME 선수명,
       POSITION 포지션,
       BACK_NO 백넘버
FROM PLAYER P
WHERE TEAM_ID LIKE(SELECT TEAM_ID 
                   FROM PLAYER 
                   WHERE PLAYER_NAME LIKE '이현' )
ORDER BY PLAYER_NAME;


-- SOCCER_SQL_022
-- NULL 처리에 있어
-- SUM(NVL(SAL,0)) 로 하지말고
-- NVL(SUM(SAL),0) 으로 해야 자원낭비가 줄어든다
 
-- 팀별 포지션별 인원수와 팀별 전체 인원수 출력
 
-- Oracle, Simple Case Expr 


 SELECT TEAM_ID,
              NVL(SUM(CASE WHEN POSITION = 'FW' THEN 1 END), 0) FW,
              NVL(SUM(CASE WHEN POSITION = 'MF' THEN 1 END), 0) MF,
              NVL(SUM(CASE WHEN POSITION = 'DF' THEN 1 END), 0) DF,
              NVL(SUM(CASE WHEN POSITION = 'GK' THEN 1 END), 0) GK,
              COUNT(*) SUM
 FROM PLAYER P
 GROUP BY TEAM_ID;
 
DESC TEAM;
 
 -- SOCCER_SQL_023
-- GROUP BY 절 없이 전체 선수들의 포지션별 평균 키 및 전체 평균 키 출력

SELECT ROUND(AVG(CASE WHEN POSITION = 'MF' THEN HEIGHT END),2) 미드필더,
       ROUND(AVG(CASE WHEN POSITION = 'FW' THEN HEIGHT END),2) 포워드,
       ROUND(AVG(CASE WHEN POSITION = 'DF' THEN HEIGHT END),2) 디펜더,
       ROUND(AVG(CASE WHEN POSITION = 'GK' THEN HEIGHT END),2) 골키퍼,
       ROUND(AVG(HEIGHT),2)평균키
FROM PLAYER;

-- SOCCER_SQL_024 
-- 소속팀별 키가 가장 작은 사람들의 정보

SELECT P.TEAM_ID,
       TEAM_NAME,
       PLAYER_NAME,
       POSITION,
       BACK_NO,
       HEIGHT
FROM PLAYER P
    JOIN TEAM T
        ON P.TEAM_ID LIKE T.TEAM_ID
ORDER BY HEIGHT;
        
        
        
        